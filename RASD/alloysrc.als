//The company ask for specific data about 3 users, 2 of the users
//accept company request, one user refuses.
open util/integer
sig User {
	ssn : one SSN,
	diseases : set Disease,
	address : one Address,
	age: one Int,   //age instead of birthdate
}{


}

sig Company {
	api: one APIKey,
	requests: set DataAccessRequest,
	subscriptions: set Subscription,
}{


}

sig InfoPacket {}

abstract sig DataAccessRequest {
	company: one Company
}

// user signatures --------------------------------------------------

sig WearableDevice {

}

sig UserPreferences {

}

sig BodyInfo {

}

// company signatures --------------------------------------------------

sig SpecificRequest extends DataAccessRequest {

}

sig GroupRequest extends DataAccessRequest {

}

one sig DataBroker {
 	pendingRequests : set DataAccessRequest,
	authRequests: set DataAccessRequest,
	authAPIKeys : set APIKey
} {

}

sig Subscription {
	access: one DataAccessRequest
}

sig APIKey {

}

// general signatures --------------------------------------------------

sig Notification {}

sig SSN {}

sig Disease {}

sig City{}

sig Address {
	city: one City
}

// facts -----------------------------------------------------------

// all users have different SSN
fact { all user1, user2: User | (user1 != user2) implies (user1.ssn != user2.ssn)}

//all users are between 18 and 30 (for simplicity)
fact {all user: User | user.age >= 18 && user.age < 30}

 // all companies have a different APIKey
fact { all company1, company2: Company |(company1 != company2) implies company1.api != company2.api}

//all APIKey are registered inside the DataBroker
fact { all api: APIKey | one dB: DataBroker | api in dB.authAPIKeys}

//all requests in Company.DataAcessRequests are different
fact { all company: Company | all r1, r2 : DataAccessRequest |
 	  (r1 in company.requests && r2 in company.requests) implies (r1 != r2)}

//all subscription in Company.subscriptions are different
fact { all company: Company | all s1, s2 : Subscription |
 	  (s1 in company.subscriptions && s2 in company.subscriptions) implies (s1 != s2)}

//all subscription are generated by a company
fact {all subscription: Subscription | one company: Company | subscription in company.subscriptions}

//dataBroker authRequest and pendignRequests are two disjointed subset of company requests
fact{one dB: DataBroker | all req1,req2 : DataAccessRequest |
     (req1 in dB.pendingRequests && req2 in dB.authRequests) implies (req1 != req2)}

fact{all req: DataAccessRequest | one dB: DataBroker |
     req in dB.authRequests or req in dB.pendingRequests}


pred show() {}
run show for 3 but exactly 3 User, exactly 1 Company, 7 Int, exactly 3 DataAccessRequest
